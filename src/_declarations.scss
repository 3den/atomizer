/**
 ==================================================================
 BORDER
 ==================================================================
 */
/**
 * global reset declarations (i.e. ".Bd-0") - unlike specific ones (i.e. ".Bdb-0") - should come before any other declaration
 */
.Bd-0 {
    border: 0;
}

.Bd-1 {
    border-width: 1px;
}

.Bdx-1 {
    border-left-width: 1px;
    border-right-width: 1px;
}

.Bdy-1 {
    border-top-width: 1px;
    border-bottom-width: 1px;
}

.Bd-t {
    border-top-width: 1px;
}

.Bd-end {
    border-#{$end}-width: 1px;
}

.Bd-b {
    border-bottom-width: 1px;
}

.Bd-start {
    border-#{$start}-width: 1px;
}

.Bdt-0 {
    border-top: 0;
}

.Bdend-0 {
    border-#{$end}: 0;
}

.Bdb-0 {
    border-bottom: 0;
}

.Bdstart-0 {
    border-#{$start}: 0;
}

/**
 ==================================================================
 BORDER RADIUS
 ==================================================================
 */
/**
 * reset declarations (i.e. ".Bdrs-0") should come before any other declaration
 */
.Bdrs-0 {
    border-radius: 0;
}

.Bdtrrs-0 {
    border-top-#{$end}-radius: 0;
}

.Bdtlrs-0 {
    border-top-#{$start}-radius: 0;
}

.Bdbrrs-0 {
    border-bottom-#{$end}-radius: 0;
}

.Bdblrs-0 {
    border-bottom-#{$start}-radius: 0;
}

/**
 * very large radius (i.e. to create a 'pill box')
 */
.Bdrs-500 {
    border-radius: 500px; /* 1 */
}

.Bdtrrs-500 {
    border-top-#{$end}-radius: 500px;
}

.Bdtlrs-500 {
    border-top-#{$start}-radius: 500px;
}

.Bdbrrs-500 {
    border-bottom-#{$end}-radius: 500px;
}

.Bdblrs-500 {
    border-bottom-#{$start}-radius: 500px;
}

/**
 * border radius: 50%
 */
.Bdrs-50 {
    border-radius: 50%;
}

.Bdtrrs-50 {
    border-top-#{$end}-radius: 50%;
}

.Bdtlrs-50 {
    border-top-#{$start}-radius: 50%;
}

.Bdbrrs-50 {
    border-bottom-#{$end}-radius: 50%;
}

.Bdblrs-50 {
    border-bottom-#{$start}-radius: 50%;
}

/**
 * default border radius
 */
.Bdrs {
    border-radius: $default-radius-value;
}

.Bdtrrs {
    border-top-#{$end}-radius: $default-radius-value;
}

.Bdtlrs {
    border-top-#{$start}-radius: $default-radius-value;
}

.Bdbrrs {
    border-bottom-#{$end}-radius: $default-radius-value;
}

.Bdblrs {
    border-bottom-#{$start}-radius: $default-radius-value;
}

/**
 ==================================================================
 FONT FAMILY (checked) suffix matches generic font-family
 ==================================================================
 */

@each $font-family_suffix, $value in $font-family_values {
    .Ff-#{$font-family_suffix} {
        font-family: $value;
    }
}

/**
 * ============================================================================
 * SOT: https://code.google.com/p/zen-coding/wiki/ZenCSSPropertiesEn
 *      http://docs.emmet.io/cheat-sheet/
 * ============================================================================
 */

/**
 *  NOTES:
 *
 *  Depending on the selector you use to namespace these rules (id versus class), their style weight will be either 0,1,0,0 or 0,0,1,0. We suggest using an id for the extra specificity.
 *  - look for top/right/bottom/left rules in the "offset" section
 *  - we do *not* use left and right as keywords for class names, instead we use "start" and "end"
 *  - T-Shirt sizes follow http://www.americanapparel.net/sizing/default.asp?chart=mu.shirts
 *  - TODO: bring consistency in the use of !important
 */

/**
 ==================================================================
 BACKGROUNDS
 ==================================================================
 */

/* background-color/image "resets" */
.Bg-n {
    background: none;
}

.Bgc-t {
    background-color: transparent;
}

.Bgi-n {
    background-image: none;
}

/* background-color TODO: make this more clever than that */
@each $background-color_suffix, $value in $background-color_values {
    .Bgc-#{$background-color_suffix} {
        background-color: $value;
    }
}

/* background-clip */
@include set-rules-for-static-map(
    Bgclip,
    background-clip,
    $background-clip_values,
    (bb: border-box, pb: padding-box, cb: content-box)
);

/* background-origin */
@include set-rules-for-static-map(
        Bgo,
    background-origin,
    $background-origin_values,
    (bb: border-box, pb: padding-box, cb: content-box)
);

/* background-size (length would be customized) */
@include set-rules-for-static-map(
    Bgs,
    background-size,
    $background-size_values,
    (a: auto, ct: contain, cv: cover)
);

/* background-attachment */
@include set-rules-for-static-map(
    Bga,
    background-attachment,
    $background-attachment_values,
    (f: fixed, l: local, s: scroll)
);

/* background-position *4 corners only* (s=start and e=end) */
@include set-rules-for-static-map(
    Bgp,
    background-position,
    $background-position_values,
    (st: $start 0, et: $end 0, bs: $start 100%, be: $end 100%)
);

/* background-repeat */
@include set-rules-for-static-map(
    Bgr,
    background-repeat,
    $background-repeat_values,
    (n: no-repeat, x: repeat-x, y: repeat-y, r: repeat, s: space, ro: round)
);

/**
 ==================================================================
 BORDER-COLLAPSE (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Bdcl,
    border-collapse,
    $border-collapse_values,
    (c: collapse, s: separate, inh: inherit)
);

/**
 ==================================================================
 BOX-SIZING (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Bxz,
    box-sizing,
    $box-sizing_values,
    (cb: content-box, pb: padding-box, bb: border-box, inh: inherit)
);

/**
 ==================================================================
 BOX-SHADOW
 ==================================================================
 */

.Bxsh-n {
    box-shadow: none;
}

/**
 ==================================================================
 CLEAR (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Cl,
    clear,
    $clear_values,
    (n: none, b: both, start: $start, end: $end, inh: inherit)
);

/**
 ==================================================================
 CURSOR (checked)
 TODO: how to deal with URIs?
 ==================================================================
 */

@include set-rules-for-static-map(
    Cur,
    cursor,
    $cursor_values,
    (a: auto, c: crosshair, d: default, p: pointer, m: move, er: e-resize, ner: ne-resize, nwr:  nw-resize, nr: n-resize, ser: se-resize, swr: sw-resize, sr: s-resize, wr: w-resize, t: text, w: wait, h: help, pr: progress, inh: inherit)
);

/**
 ==================================================================
 DISPLAY (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    D,
    display,
    $display_values,
    (n: none, b: block, f: flex, i: inline, ib: inline-block, inh: inherit, tb: table, tbr: table-row, tbc: table-cell, li: list-item, ri: run-in, cp: compact, itb: inline-table, tbcl: table-column, tbclg: table-column-group, tbhg: table-header-group, tbfg: table-footer-group, tbrg: table-row-group)
);

/**
 ==================================================================
 FLEX
 ==================================================================
 */
/* FLEX (checked)
 * width values (i.e. 350px) cannot really be set here (as a generic value)
 */
$flex_valid-values: number, auto, none;
$flex_units: none;
@include set-rules-for-list(Flx, flex, $flex_values, $flex_valid-values, $flex_units);

/* FLEX-ALIGN (checked)  */
$flex-align_valid_values: start, end, center, baseline, stretch;
$Fla-units: none;
@include set-rules-for-map(Fla, flex-align, $flex-align_values, $flex-align_valid_values, $Fla-units);

/* FLEX-DIRECTION (checked)  */
$flex-direction_valid_values: row, row-reverse, column, column-reverse;
$flex-direction_units: none;
@include set-rules-for-map(Fld, flex-direction, $flex-direction_values, $flex-direction_valid_values, $flex-direction_units);

/* FLEX-FLOW (checked)  */
$flex-flow_valid_values: row, row-reverse, column, column-reverse, nowrap, wrap, wrap-reverse;
$flex-flow_units: none;
@include set-rules-for-map(Flf, flex-flow, $flex-flow_values, $flex-flow_valid_values, $flex-flow_units);

/* FLEX-ITEM-ALIGN (checked)  */
$flex-item-align_valid_values: auto, start, end, center, baseline, stretch;
$flex-item-align_units: none;
@include set-rules-for-map(Flia, flex-item-align, $flex-item-align_values, $flex-item-align_valid_values, $flex-item-align_units);

/* FLEX-LINE-PACK (checked)  */
$flex-line-pack_valid_values: start, end, center, justify, distribute, stretch;
$flex-line-pack_units: none;
@include set-rules-for-map(Fllp, flex-line-pack, $flex-line-pack_values, $flex-line-pack_valid_values, $flex-line-pack_units);

/* FLEX-ORDER (checked)  */
$flex-order_valid_values: number;
$flex-order_units: none;
@include set-rules-for-list(Flo, flex-order, $flex-order_values, $flex-order_valid_values, $flex-order_units);

/* FLEX-PACK (checked)  */
$flex-pack_valid_values: start, end, center, justify, distribute;
$flex-pack_units: none;
@include set-rules-for-map(Flp, flex-pack, $flex-pack_values, $flex-pack_valid_values, $flex-pack_units);

/* FLEX-WRAP (checked)  */
$flex-wrap_valid_values: nowrap, wrap, wrap-reverse;
$flex-wrap_units: none;
@include set-rules-for-map(Flw, flex-wrap, $flex-wrap_values, $flex-wrap_valid_values, $flex-wrap_units);

/**
 ==================================================================
 FLOAT (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Fl,
    float,
    $float_values,
    (n: none, start: $start, end: $end, inh: inherit)
);

/**
 ==================================================================
 FONT-WEIGHT (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Fw,
    font-weight,
    $font-weight_values,
    (n: normal, b: bold, br: bolder, lr: lighter, 100: 100, 200: 200, 300: 300, 400: 400, 500: 500, 600: 600, 700: 700, 800: 800, 900: 900, inh: inherit)
);

/**
 ==================================================================
 FONT-SIZE (checked but not using mm/cm/and other like that)
 ==================================================================
 */

$font-size_valid_values: inherit, xx-small, x-small, small, smaller, medium, large, larger, x-large, xx-large, number;
$font-size_units: px, "%", em, ex, ch, rem, vw, vh, vmin, vmax;

@each $value in $font-size_values {
    // we check if this is 0 or a keyword
    @if index($font-size_valid_values, $value) or $value == 0 {
        @if $value == 0 {
            .Fz-0 {
                font-size: 0;
            }
        }
        @if $value == inherit {
            .Fz-inh {
                font-size: inherit;
            }
        }
        @if $value == xx-small {
            .Fz-xxs {
                font-size: xx-small;
            }
        }
        @if $value == x-small {
            .Fz-xs {
                font-size: x-small;
            }
        }
        @if $value == small {
            .Fz-s {
                font-size: small;
            }
        }
        @if $value == smaller {
            .Fz-sr {
                font-size: smaller;
            }
        }
        @if $value == medium {
            .Fz-m {
                font-size: medium;
            }
        }
        @if $value == large {
            .Fz-l {
                font-size: large;
            }
        }
        @if $value == larger {
            .Fz-lr {
                font-size: larger;
            }
        }
        @if $value == x-large {
            .Fz-xl {
                font-size: x-large;
            }
        }
        @if $value == xx-large {
            .Fz-xx-l {
                font-size: xx-large;
            }
        }
    } @else if type-of($value) == number {
        // checking for absence of unit
        @if unit($value) == ""  {
            @error "Unit is missing.";
        }
        // checking if unit is valid
        @if index($font-size_units, unquote(unit($value))) == null {
            @error "Unit should be: " + $font-size_units;
        }
        .Fz-#{$index} {
            font-size: #{$value};
        }
        $index: $index + 1;
    } @else {
        @error $value + " is not a valid value for Font-size. Valid values are: " + $font-size_valid_values;
    }
}

/**
 ==================================================================
 FONT-STYLE
 ==================================================================
 */

@include set-rules-for-static-map(
    Fs,
    font-style,
    $font-style_values,
    (n: normal, i: italic)
);

/**
 ==================================================================
 FONT-VARIANT
 ==================================================================
 */

@include set-rules-for-static-map(
    Fv,
    font-variant,
    $font-variant_values,
    (n: normal, sc: small-caps)
);

/**
 ==================================================================
 HEIGHT
 ==================================================================
 */

$height_valid_values: auto, inherit, number;
$height_units: px, em, rem, "%";
@each $height_value in $height_values {
    @if type-of($height_value) == number and index($height_valid_values, number) {
        @if unit($height_value) == '%' {
            $suffix: strip-units($height_value);
            .H-#{$suffix}\% {
                height: $height_value;
            }
        } @else {
            .H-#{$height_value} {
                height: $height_value;
            }
        }
    } @else if (index($height_valid_values, $height_value)) {
        .H-#{$height_value} {
            height: $height_value;
        }
    } @else {
        @error "Authorized values are: " + $height_valid_values;
    }
}

/**
 ==================================================================
 HYPHENS (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Hy,
    hyphens,
    $hyphens_values,
    (n: none, m: manual, a: auto, inh: inherit)
);

/**
 ==================================================================
 LIST-STYLE-TYPE (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    List,
    list-style-type,
    $list-style-type_values,
    (n: none, inh: inherit, d: disc, c: circle, s: square, dc: decimal, dclz: decimal-leading-zero, lr: lower-roman, lg: lower-greek, ll: lower-latin, ur: upper-roman, ul: upper-latin, a: armenian, g: georgian, la: lower-alpha, ua: upper-alpha)
);

/**
 ==================================================================
 LIST-STYLE-IMAGE (checked) could we validate the URL?
 ==================================================================
 */

@each $list-style-image_suffix, $value in $list-style-image_values {
  // if string starts with "http";
  @if (str-index(#{$value}, "http")) {
    .Lisi-#{$list-style-image_suffix} {
        list-style-image: url(#{$value}); /* */
    }
  } @else if ($value == none) or ($value == inherit) {
    .Lisi-#{$list-style-image_suffix} {
        list-style-image: #{$value};
    }
  } @else {
      @error "Value should be none, inherit, or a URI";
  }
}

/**
 ==================================================================
 LINE-HEIGHT
 ==================================================================
 */

@each $line-height_value in $line-height_values {
    @if (type-of($line-height_value) == number or $line-height_value == normal or $line-height_value == inherit) {
        $suffix: str-slice(#{$line-height_value}, 0, 1) + \. + str-slice(#{$line-height_value}, 3, 3);
        @if (str-index(#{$line-height_value}, ".")) {
            .Lh-#{$suffix} {
                line-height: $line-height_value;
            }
        } @else if ($line-height_value == normal) {
            .Lh-n {
                line-height: $line-height_value;
            }
        } @else if ($line-height_value == inherit) {
            .Lh-inh {
                line-height: $line-height_value;
            }
        } @else {
            .Lh-#{$line-height_value} {
                line-height: $line-height_value;
            }
        }
    } @else {
        @error "The only possible values here are either a number, 'normal', or 'inherit'";
    }
}

/**
 ==================================================================
 MARGINS
 ==================================================================
 */

/**
 * ALL EDGES (checked)
 */

$margin_valid_values: number, auto, inherit;
$margin_units: "%", px, rem, em;
@include set-rules-for-list(M, margin, $margin_values, $margin_valid_values, $margin_units);

/**
 * 'X' AXYS
 */

$margin-x_valid_values: auto, number;
$margin-x_units: px, em, rem;
@each $margin-x_value in $margin-x_values {
    @if index($margin-x_valid_values, $margin-x_value) or type-of($margin-x_value) == number {
        @if ($margin-x_value == auto) {
            .Mx-a {
                margin-right: $margin-x_value;
                margin-left: $margin-x_value;
            }
        } @else if ($margin-x_value == 0) {
            .Mx-#{$margin-x_value} {
                margin-right: $margin-x_value;
                margin-left: $margin-x_value;
            }
        } @else {
            // checking for proper unit
            @if ($margin-x_units != none) {
                @if not (index($margin-x_units, unit($margin-x_value))) {
                    @error "Value should be in: " + $margin-x_units;
                }
            }
            .Mx-#{$margin-x_value} {
                margin-right: $margin-x_value;
                margin-left: $margin-x_value;
            }
        }
    } @else {
        @error "Valid values for left/right margins are: " + $margin-x_valid_values;
    }
}

/**
 * 'Y' AXYS
 */

$margin-y_valid_values: auto, number;
$margin-y_units: px, em, rem;
@each $margin-y_value in $margin-y_values {
    @if index($margin-y_valid_values, $margin-y_value) or type-of($margin-y_value) == number {
        @if ($margin-y_value == auto) {
            .My-a {
            margin-top: $margin-y_value;
            margin-bottom: $margin-y_value;
            }
        } @else if ($margin-y_value == 0) {
            .My-#{$margin-y_value} {
            margin-top: $margin-y_value;
            margin-bottom: $margin-y_value;
            }
        } @else {
            // checking for proper unit
            @if ($margin-y_units != none) {
                @if not (index($margin-y_units, unit($margin-y_value))) {
                    @error "Value should be in: " + $margin-y_units;
                }
            }
            .My-#{$margin-y_value} {
            margin-top: $margin-y_value;
            margin-bottom: $margin-y_value;
            }
        }
    } @else {
        @error "Valid values are: " + $margin-y_valid_values;
    }
}

/**
 * TOP
 */

$margin-top_valid_values: auto, number;
$margin-top_units: "%", px, rem, em;
@include set-rules-for-list(Mt, margin-top, $margin-top_values, $margin-top_valid_values, $margin-top_units);

/* negative values */

$margin-top_negative_valid_values: number;
$margin-top_negative_units: "%", px, rem, em;
@include set-rules-for-list(Mt-neg, margin-top, $margin-top_negative_values, $margin-top_negative_valid_values, $margin-top_negative_units);

/**
 * END (Right in LTR, Left in RTL)
 */

$margin-end_valid_values: auto, number;
$margin-end_units: "%", px, rem, em;
@include set-rules-for-list(Mend, margin-#{$end}, $margin-end_values, $margin-end_valid_values, $margin-end_units);

/* negative values */

$margin-end_negative_valid_values: number;
$margin-end_negative_units: "%", px, rem, em;
@include set-rules-for-list(Mend-neg, margin-#{$end}, $margin-end_negative_values, $margin-end_negative_valid_values, $margin-end_negative_units);

/**
 * BOTTOM
 */

$margin-bottom_valid_values: auto, number;
$margin-bottom_units: "%", px, rem, em;
@include set-rules-for-list(Mb, margin-bottom, $margin-bottom_values, $margin-bottom_valid_values, $margin-bottom_units);

/* negative values */

$margin-bottom_negative_valid_values: number;
$margin-bottom_negative_units: "%", px, rem, em;
@include set-rules-for-list(Mb-neg, margin-bottom, $margin-bottom_negative_values, $margin-bottom_negative_valid_values, $margin-bottom_negative_units);

/**
 * START (Left in LTR, Right in RTL)
 */

$margin-start_valid_values: auto, number;
$margin-start_units: "%", px, rem, em;
@include set-rules-for-list(Mstart, margin-#{$start}, $margin-start_values, $margin-start_valid_values, $margin-start_units);

/* negative values */

$margin-start_negative_valid_values: number;
$margin-start_negative_units: "%", px, rem, em;
@include set-rules-for-list(Mstart-neg, margin-#{$start}, $margin-start_negative_values, $margin-start_negative_valid_values, $margin-start_negative_units);

/**
 ==================================================================
 MAX-HEIGHT (checked)
 ==================================================================
 */

$max-height_valid_values: none, inherit, number;
$max-height_units: "%", px, rem, em;
@include set-rules-for-list(Mah, max-height, $max-height_values, $max-height_valid_values, $max-height_units);

/**
 ==================================================================
 MAX-WIDTH (checked)
 ==================================================================
 */

$max-width_valid_values: none, inherit, number;
$max-width_units: "%", px, rem, em;
@include set-rules-for-list(Maw, max-width, $max-width_values, $max-width_valid_values, $max-width_units);

/**
 ==================================================================
 MIN-HEIGHT (checked)
 ==================================================================
 */

$min-height_valid_values: inherit, number;
$min-height_units: "%", px, rem, em;
@include set-rules-for-list(Mih, min-height, $min-height_values, $min-height_valid_values, $min-height_units);

/**
 ==================================================================
 MIN-WIDTH (checked)
 ==================================================================
 */

$min-width_valid_values: inherit, number;
$min-width_units: "%", px, rem, em;
@include set-rules-for-list(Miw, min-width, $min-width_values, $min-width_valid_values, $min-width_units);

/**
 ==================================================================
 OUTLINE (reset mostly, no custom styling)
 ==================================================================
 */

$outline_valid_values: 0, none, inherit;
$outline_units: none;
@include set-rules-for-list(O, outline, $outline_values, $outline_valid_values, $outline_units);

/**
 ==================================================================
 OFFSETS (checked)
 ==================================================================
 */

/* TOP */
$top_valid_values: auto, inherit, number;
$top_units: "%", px, rem, em;
@include set-rules-for-list(T, top, $top_values, $top_valid_values, $top_units);

/* END (right) */
$end_valid_values: auto, inherit, number;
$end_units: "%", px, rem, em;
@include set-rules-for-list(End, #{$end}, $end_values, $end_valid_values, $end_units);

/* BOTTOM */
$bottom_valid_values: auto, inherit, number;
$bottom_units: "%", px, rem, em;
@include set-rules-for-list(B, bottom, $bottom_values, $bottom_valid_values, $bottom_units);

/* START (left) */
$start_valid_values: auto, inherit, number;
$start_units: "%", px, rem, em;
@include set-rules-for-list(Start, #{$start}, $start_values, $start_valid_values, $start_units);

/**
 ==================================================================
 OPACITY (checked) (class always contain 2 digits after "0." - i.e. Op-0.50)
 TODO: change the function so the suffix can be .Op-0.5 instead of .Op-0.50
 ==================================================================
 */

$opacity_valid_values: inherit, number;
@each $opacity_value in $opacity_values {
    @if ($opacity_value != inherit)  and (type-of($opacity_value) != number) {
        @error "Opacity values should be either 'inherit' or a number.";
    }  @if ($opacity_value == inherit) {
        .Op-inh {
        opacity: inherit;
        }
    } @else if ($opacity_value == 0) {
        .Op-0 {
            opacity: 0;
            filter: alpha(opacity= 0);
        }
    } @else if ($opacity_value == 1) {
        .Op-1 {
            opacity: 1;
            filter: alpha(opacity= 100);
        }
    } @else if ($opacity_value > 0) and ($opacity_value < 1)  {
        // Make sure we have 2 decimal after the "." (i.e. ".50" and not ".5")
        $suffix: $opacity_value * 100;
        $suffix: str-slice(#{$suffix}, 0, 3);
        .Op-0#{$escape}.#{$suffix} {
            opacity: #{$opacity_value};
            filter: alpha(opacity= $opacity_value * 100);
        }
    } @else {
        @error "Numbers between 0 and 1 only";
    }
}

/**
 ==================================================================
 OVERFLOW (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Ov,
    overflow,
    $overflow_values,
    (v: visible, h: hidden, s: scroll, a: auto, inh: inherit)
);

/**
 ==================================================================
 OVERFLOW-X (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Ovx,
    overflow-x,
    $overflow-x_values,
    (v: visible, h: hidden, s: scroll, a: auto, inh: inherit)
);

/**
 ==================================================================
 OVERFLOW-Y (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Ovy,
    overflow-y,
    $overflow-y_values,
    (v: visible, h: hidden, s: scroll, a: auto, inh: inherit)
);

/**
 ==================================================================
 OVERFLOW-SCROLLING (-webkit-)
 ==================================================================
 */

@include set-rules-for-static-map(
    Ovs,
    -webkit-overflow-scrolling,
    $-webkit-overflow-scrolling_values,
    (t: touch)
);

/**
 ==================================================================
 PADDING
 ==================================================================
 */

/**
 * ALL EDGES
 */

$padding_valid_values: number;
$padding_units: px, em, rem, "%";
@include set-rules-for-list(P, padding, $padding_values, $padding_valid_values, $padding_units);

/**
 * 'X' AXYS
 */

$padding-x_valid_values: number;
$padding-x_units: px, em, rem, "%";

@each $padding-x_value in $padding-x_values {
    @if index($padding-x_valid_values, $padding-x_value) or type-of($padding-x_value) == number {
        @if ($padding-x_value == auto) {
            .Px-a {
            padding-right: $padding-x_value;
            padding-left: $padding-x_value;
            }
        } @else if ($padding-x_value == 0) {
            .Px-#{$padding-x_value} {
            padding-right: $padding-x_value;
            padding-left: $padding-x_value;
            }
        } @else {
            // checking for proper unit
            @if ($padding-x_units != none) {
                @if not (index($padding-x_units, unit($padding-x_value))) {
                    @error "Value should be in: " + $padding-x_units;
                }
            }
            .Px-#{$padding-x_value} {
            padding-right: $padding-x_value;
            padding-left: $padding-x_value;
            }
        }
    } @else {
        @error "Valid values are: " + $padding-x_valid_values;
    }
}

/**
 * 'Y' AXYS
 */

$padding-y_valid_values: number;
$padding-y_units: px, em, rem, "%";
@each $padding-y_value in $padding-y_values {
    @if index($padding-y_valid_values, $padding-y_value) or type-of($padding-y_value) == number {
        @if ($padding-y_value == auto) {
            .Py-a {
            padding-top: $padding-y_value;
            padding-bottom: $padding-y_value;
            }
        } @else if ($padding-y_value == 0) {
            .Py-#{$padding-y_value} {
            padding-top: $padding-y_value;
            padding-bottom: $padding-y_value;
            }
        } @else {
            // checking for proper unit
            @if ($padding-y_units != none) {
                @if not (index($padding-y_units, unit($padding-y_value))) {
                    @error "Value should be in: " + $padding-y_units;
                }
            }
            .Py-#{$padding-y_value} {
            padding-top: $padding-y_value;
            padding-bottom: $padding-y_value;
            }
        }
    } @else {
        @error "Valid values are: " + $padding-y_values;
    }
}

/**
 * TOP
 */

$padding-top_valid_values: number;
$padding-top_units: px, em, rem, "%";
@include set-rules-for-list(Pt, padding-top, $padding-top_values, $padding-top_valid_values, $padding-top_units);

/**
 * END (Right in LTR, Left in RTL)
 */

$padding-end_valid_values: number;
$padding-end_units: px, em, rem, "%";
@include set-rules-for-list(Pend, padding-#{$end}, $padding-end_values, $padding-end_valid_values, $padding-end_units);

/**
 * BOTTOM
 */

$padding-bottom_valid_values: number;
$padding-bottom_units: px, em, rem, "%";
@include set-rules-for-list(Pb, padding-bottom, $padding-bottom_values, $padding-bottom_valid_values, $padding-bottom_units);

/**
 * START (Left in LTR, Right in RTL)
 */

$padding-start_valid_values: number;
$padding-start_units: px, em, rem, "%";
@include set-rules-for-list(Pstart, padding-#{$start}, $padding-start_values, $padding-start_valid_values, $padding-start_units);

/**
 ==================================================================
 POINTER-EVENTS
 ==================================================================
 */

@include set-rules-for-static-map(
    Pe,
    pointer-events,
    $pointer-events_values,
    (n: none, a: auto)
);

/**
 ==================================================================
 POSITION (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Pos,
    position,
    $position_values,
    (s: static, a: absolute, r: relative, f: fixed, inh: inherit)
);

/**
 ==================================================================
 TABLE-LAYOUT (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Tbl,
    table-layout,
    $table-layout_values,
    (f: fixed, a: auto, inh: inherit)
);

/**
 ==================================================================
 TEXT-ALIGN (checked) TODO: inherit?
 ==================================================================
 */

@include set-rules-for-static-map(
    Ta,
    text-align,
    $text-align_values,
    (start: #{$start}, end: #{$end}, c: center, j: justify, m: match-parent)
);

/**
 ==================================================================
 TEXT-ALIGN-LAST (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Tal,
    text-align-last,
    $text-align-last_values,
    (a: auto, start: #{$start}, end: #{$end}, c: center, j: justify)
);

/**
 ==================================================================
 TEXT-DECORATION (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Td,
    text-decoration,
    $text-decoration_values,
    (n: none, u: underline, o: overline, l: line-through)
);

/**
 ==================================================================
 TEXT-RENDERING (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Tren,
    text-rendering,
    $text-rendering_values,
    (a: auto, os: optimizeSpeed, ol: optimizeLegibility, gp: geometricPrecision, inh: inherit)
);

/**
 ==================================================================
 TEXT-REPLACE (checked)
 http://www.w3.org/TR/2007/WD-css3-gcpm-20070504/
 ==================================================================
 */

@include set-rules-for-static-map(
    Tr,
    text-replace,
    $text-replace_values,
    (n: none)
);

/**
 ==================================================================
 TEXT-TRANSFORM (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Tt,
    text-transform,
    $text-transform_values,
    (n: none, c: capitalize, u: uppercase, l: lowercase)
);

/**
 ==================================================================
 TEXT-SHADOW TODO:
 custom values would be: hoff voff blur #000;
 ==================================================================
 */

$text-shadow_valid_values: none;
$text-shadow_units: none;
@include set-rules-for-map(Tsh, text-shadow, $text-shadow_values, $text-shadow_valid_values, $text-shadow_units);

/**
 ==================================================================
 USER-SELECT (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Us,
    user-select,
    $user-select_values,
    (n: none, t: text, to: toggle, el: element, els: elements, a: all, inh: inherit)
);


/**
 ==================================================================
 VERTICAL-ALIGN (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Va,
    vertical-align,
    $vertical-align_values,
    (sup: super, t: top, tt: text-top, m: middle, bl: baseline, b: bottom, tb: text-bottom, sub: sub)
);

/**
 ==================================================================
 VISIBILITY (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    V,
    visibility,
    $visibility_values,
    (v: visible, h: hidden, c: collapse)
);

/**
 ==================================================================
 WHITE-SPACE (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Whs,
    white-space,
    $white-space_values,
    (n: normal, p: pre, nw:  nowrap, pw: pre-wrap, pl: pre-line)
);

/**
 ==================================================================
 WHITE-SPACE-COLLAPSE (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Whsc,
    white-space-collapse,
    $white-space-collapse_values,
    (n: normal, k: keep-all, l: loose, bs: break-strict, ba: break-all)
);

/**
 ==================================================================
 WIDTH
 ==================================================================
 */

/**
 * Generic (auto, inherit, 0) + Percentage values or else
 */

$width_valid_values: auto, inherit, number;
$width_units: px, em, rem, "%";
@include set-rules-for-list(W, width, $width_values, $width_valid_values, $width_units);

/**
 * Fraction values (for grid)
 */

@media #{inspect(map-get($breakpoints, "xs"))} {
    @while $base-unit-for-grid >= $index  {
        .W-xs-#{$index}\/#{$base-unit-for-grid} {
            width: unquote(($index / $base-unit-for-grid * 100) + "%");
        }
        $index: $index + 1;
    }
}

@media #{inspect(map-get($breakpoints, "sm"))} {
    @while $base-unit-for-grid >= $index  {
        .W-sm-#{$index}\/#{$base-unit-for-grid} {
            width: unquote(($index / $base-unit-for-grid * 100) + "%");
        }
        $index: $index + 1;
    }
}

@media #{inspect(map-get($breakpoints, "md"))} {
    @while $base-unit-for-grid >= $index  {
        .W-md-#{$index}\/#{$base-unit-for-grid} {
            width: unquote(($index / $base-unit-for-grid * 100) + "%");
        }
        $index: $index + 1;
    }
}

@media #{inspect(map-get($breakpoints, "lg"))} {
    @while $base-unit-for-grid >= $index  {
        .W-lg-#{$index}\/#{$base-unit-for-grid} {
            width: unquote(($index / $base-unit-for-grid * 100) + "%");
        }
        $index: $index + 1;
    }
}

/**
 ==================================================================
 WORD_BREAK (checked)
 ==================================================================
 */

@include set-rules-for-static-map(
    Wob,
    word-break,
    $word-break_values,
    (n: normal, ba: break-all, k: keep-all)
);

/**
 ==================================================================
 WORD_WRAP (not part of the spec)
 ==================================================================
 */

@include set-rules-for-static-map(
    Wow,
    word-warp,
    $word-warp_values,
    (bw: break-word, n: normal)
);

/**
 ==================================================================
 Z-INDEX (checked)
 ==================================================================
 */

$z-index_valid_values: number, auto, inherit;
$z-index_units: none;
@include set-rules-for-list(Z, z-index, $z-index_values, $z-index_valid_values, $z-index_units);
