/**
 * Micro reset =================================================================
 * resets padding/margin on elements for any 'container' and/or for its children
 */
.Reset,
.ResetChildren > * {
    margin: 0;
    padding: 0;
}

/**
 * This class is meant to stretch a box outside of its container (it extends the said box on each side)
 * Left right margin values must be same values as left/right padding set on the container of that box
 */
.Bleed {
    margin-right: -10px;
    margin-left: -10px;
}

/**
 * styles a span or else as a non-editable text field
 */
.Uneditable {
    display: inline-block;
    padding: 6px;
    border-radius: 3px;
    margin: 0 0 5px 0;
    cursor: not-allowed;
    color: #999;
    background-color: #fcfcfc;
    border: 1px solid #ccc;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.025);
}

/**
 * Removing tap highlight on touch devices
 */
.NoTapHighlightColor {
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0) !important;
    -webkit-tap-highlight-color: transparent; /* For some Androids */
}

/**
 * To stretch a box ============================================================
 */

/**
 * <a href="foo.html"><u class="Stretch"></u></a> to make a whole box click-able
 * the container must be *positioned* for "Stretch" to cover it
 * watch out for stacking context in case the box contains "clickable" elements
 */
.Stretch {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

/**
 * make IE 6/7/8 clickable
 * Warning: this kills the context menu tho (right-click menu is not what is expected)
 */
a:hover .Stretch {
    background-color: #fff\9;
    filter: alpha(opacity=0);
}

/**
 * 'clearfix' ==================================================================
 */
.Cf:before,
.Cf:after {
    content: " ";
    display: table;
}

.Cf:after {
    clear: both;
}

.Cf {
    zoom: 1;
}

/**
 * Block Formatting Contexts ===================================================
 */

/**
 * BFC via inline-block (full width box)
 *    Single row (see: http://cssmojo.com/row_for_grids/)
 * 1. to make sure the box clears any previous floats (left or right).
 * 2. because the box has a width, we rely on box-sizing to be able to add padding and border without making the box grow wider than its container.
 * 3. prevents the box from shrink-wrapping.
 * 4. even though we can "fake" inline-block styling in IE 6 and 7, there is no point of trying this here because those browsers don't support box-sizing (the trick we use to be able to style the box with border or padding).
 * 5. since in oldIE we style the box with display: block it won't shrink-wrap, thus we can reset the width.
 */
.Row {
    clear: both;                     /* 1 */
    box-sizing: border-box;          /* 2 */
    width: 100%;                     /* 3 */
    display: inline-block;
    *display: block;                 /* 4 */
    *width: auto;                    /* 5 */
    zoom: 1;
    vertical-align: top;
}

/**
 * BFC via overflow:hidden
 */
.Bfc {
    overflow: hidden;
    @if $desktop {
    zoom: 1;
    }
}

/**
 * BFC via table-cell (fails if it contains large block of content - i.e. image, long string, etc.)
 * 1. this is a hack, it does not make the box grow up to 1600px, just enough to fill the container
 */
.Nbfc {
    display: table-cell;
    width: 1600px; /* 1 */
    *width: auto;
    zoom: 1;
}

/**
 * 'Kill switch' ===============================================================
 * Mostly for JS (show/hide)
 * This makes the element invisible to screen-reader users
 * This removes the box from the flow
 */
.Dn {
    display: none !important;
}

/**
 * Hiding content ==============================================================
 */

/**
 * This makes the element invisible to screen-reader users
 * This does not remove the box from the flow
 *
 */
.Invisible {
    visibility: hidden !important;
}

/**
 * This makes the element accessible to screen-reader users
 * This removes the box from the flow
 */
.Hidden {
    position: absolute !important;
    clip: rect(1px 1px 1px 1px);
    clip: rect(1px,1px,1px,1px);
    padding: 0 !important;
    border: 0 !important;
    height: 1px !important;
    width: 1px !important;
    overflow: hidden;
}

/**
 * This makes the element accessible to screen-reader users
 * This does not remove the box from the flow
 * Note that this techniques creates perf issue in old iPad and is not suited for RTL context
 */
.TextHidden {
    text-indent: -999em;
    overflow: hidden;
    zoom: 1;
}

/**
 * Ellipsis ====================================================================
 */

/**
 * One liner with ellipsis
 * For block, inline-block, and the like
 * 1. In case "hyphens:auto" was inherited - which would break "Ell" in table cells
 */
.Ell {
    max-width: 100%;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    hyphens: none; /* 1 */
}

/**
 * Fix WebKit bug that displays ellipsis in middle of text
 * see: https://twitter.com/thierrykoblentz/status/443899465842176000
 * 1. removes that hack out of the flow
 */
.Ell:after {
   content: ".";
   font-size: 0;
   visibility: hidden;
   display: inline-block; /* 1 */
   overflow: hidden; /* 1 */
   height: 0; /* 1 */
   width: 0; /* 1 */
}

/**
 * No marker on list ===========================================================
 */
.NoMarker {
    padding-#{$start}: 0;
    list-style-type: none;
}

/**
 * Table (cell alignment) ======================================================
 */

/**
 * vertical-align:top; is the default styling for table cells
 * the rules below allow to ovewrite this styling by applying a class on table-rows
 */

.Va-m > th,
.Va-m > td {
    vertical-align: middle;
}

.Va-b > th,
.Va-b > td {
    vertical-align: bottom;
}

/**
 * Border between boxes ========================================================
 */

/**
 * Vertical borders in *between* boxes (columns) via pseudo-elements (IE8+)
 */
.Divided-v > li,
.Divided-v > div {
    position: relative;
}

.Divided-v > li:before,
.Divided-v > div:before {
    content: "";
    position: absolute;
    #{$start}: 0;
    top: 0;
    bottom: 0;
}

.Divided-v > li:before,
.Divided-v > div:before {
    border-#{$start}: 1px solid $default-border-color;
}

.Divided-v > li:first-child:before,
.Divided-v > div:first-child:before {
    display: none;
}

/**
 * Horizontal borders between boxes (rows) (IE7+)
 */
.Divided-h > li:first-child {
    border-top: 0;
}

.Divided-h > li {
    border-top: 1px solid $default-border-color;
}

/**
 * When applied to a table
 */
.Divided-h > tbody > tr > td {
    border-top: 1px solid $default-border-color;
}

/**
 * White-space between boxes (or images) =======================================
 */

/**
 * Separation between boxes
 * Creating a gap between boxes is not an easy feat as one cannot safely mix width/border/padding in the context of the 'content-box' model
 * So to address this, we've created *2* classes:
   - one to separate grid units (.SeparatedUnits),
   - one to separate thumbnails in a list (.SeparatedThumbs)
   The former does not create a gap between boxes in oldIE (IE6/7), but the latter does separate thumbnails

 * Both classes rely on a list/list-items construct. This is mostly because we think it is the common use case; but if it turns out differently, then we'll need to use a selector such as [class^='Grid-U'] (quid of IE6 though?)
 * For a list of thumbs, we assume the construct would be: ul.Grid > li.Grid-U-* > a > img (note that the <a> can be omitted)
 * TODO: should we extend this class? In case there is a need for smaller/bigger gaps between pics (e.g. '.SeparatedUnits-4' for a 4% gap)

 * 1. width for the gap between the boxes or images (could be pixels or else)
 * 2. no need for negative margin in IE6/7 (for thumbnails). These browsers do not support 'box-sizing', hence we are not styling the UL, nor LIs
 * 3. to reset the padding in IE7 (IE 6 does not see that rule), just in case we are missing some constructs in the fallback below
 * and any border or padding we cannot style the list items as they have an explicit 'width'  the images themselves no need for negative offset for 6/7 since we dot create separation for these browsers
 * 4. Prevents old IE from improperly resizing the thumbs
 */
.SeparatedUnits {
    margin-top: -2%;  /* 1 */
    margin-#{$start}: -2%; /* 1 */
    zoom: 1;
    *margin: 0;       /* 2 */
}

.SeparatedUnits > li,
.SeparatedUnits > div {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.SeparatedUnits > li,
.SeparatedUnits > div {
    padding-top: 2%;  /* 1 */
    padding-#{$start}: 2%; /* 1 */
    *padding: 0;      /* 3 */
}

/**
 * fallback for "separated-units" in IE 6/7
 */
.SeparatedUnits > li,
.SeparatedUnits > div {
    *padding-top: 2%;   /* 1 */
    *padding-#{$start}: 2%;  /* 1 */
}
.SeparatedUnits > .W-1\/2 {
    *width: 47.8%;
}
.SeparatedUnits > .W-1\/3 {
    *width: 30.8%;
}
.SeparatedUnits > .W-1\/4 {
    *width: 23.1%;
}
.SeparatedUnits > .W-1\/5 {
    *width: 17.96%;
}

/**
 * This cross-browsers solution requires the following construct:
 * ul.SeparatedThumbs > li.D-ib > a > img
 * 1. the 1px "gap" between the thumbs
 * 2. hacks for old IE (keep those in)
 * 3. stretch the thumbs inside the list items which are styled using percentages
 */
.SeparatedThumbs {
    margin-top: -1px;  /* 1 */
    margin-#{$start}: -1px; /* 1 */
    zoom: 1;
}

.SeparatedThumbs a img {
    *display: inline;  /* 2 */
}

.SeparatedThumbs a {
    display: block;    /* 2 */
    zoom: 1;           /* 2 */
}
.SeparatedThumbs a {
    margin-top: 1px;   /* 1 */
    margin-#{$start}: 1px;  /* 1 */
}

.SeparatedThumbs img {
    width: 100%;       /* 3 */
    height: auto;
}

/**
 * Boxes with an intrinsic ratio ===============================================
 */

/**
 * These classes are meant to create boxes that keep their aspect ratio
 * 1. 4:3 ratio (3/4 = .75 = 75%)
 * 2. this box will stretch inside '.RatioWrap, .Ratio-4\:3, etc.' (the wrappers)
 * '.SquareBox' and '.LandscapeBox' are for single elements (i.e. list item to display background images only)
 * 3. for videos embedded in an iframe
 */
.Ratio-4\:3,
.Ratio-16\:9,
.Ratio-1_91\:1,
.SquareBox,
.PortraitBox,
.LandscapeBox,
.RatioWrap {
    position: relative;
    height: 0;
}

.Ratio-4\:3 {
    padding-bottom: 75%; /* 1 */
}

.Ratio-16\:9 {
    padding-bottom: 56.25%;
}

.Ratio-1_91\:1 {
    padding-bottom: 52.25%;
}

.SquareBox {
    padding-bottom: 100%;
}

.PortraitBox {
    padding-bottom: 150%;
}

.LandscapeBox {
    padding-bottom: 50%;
}

.RatioBox {            /* 2 */
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

.StretchNestedIframe iframe { /* 3 */
    width: 100% !important;
    height: 100% !important;
    position: absolute;
}

/**
 * Line-height + height for vertical centering
 * classes follow this pattern: Lhh-<height> (i.e. .Lhh-20px)
 */
$Lhh-values: 20px, 3em, 50px;
@include lineHeightAndHeight($Lhh-values);


/**
 * Styles background images center and cover
 * !important is used here to make sure author can go shorthand in the markup
 * 1. for IE8- that does not support "cover"
 */
.BackgroundPic {
    background-repeat: no-repeat !important;
    background-position: 50% 50% !important; /* 1 */
    background-size: cover !important;
}

/**
 * Styles background of an element on mouseover (ie8+ as this could kill IE7)
 */
:root .BackgroundChange:hover {
    background-color: #f5f5f5;
}

/* swaps the background to white (ie8+ only since this is only candy stuff) */
:root .BackgroundChange-w:hover {
    background-color: #fff;
}

/**
 * Reveals an hidden element on :hover or :focus/active
 * Using JS to apply the class
 */
:root .NestedHidden {
    opacity: 0;
}

:root .NestedHidden:focus,
:root .RevealNested:hover .NestedHidden,
:root .RevealNested-on .NestedHidden {
    opacity: 1;
}

/**
 * These classes helps to style items in lists with less verbosity.
 * use them to style all children of a box (UL or DL)  with 'inline-block' or with 'float'
 * IMPORTANT: because of IE6 we cannot target the first children, and the first children only, so be careful when using this class :-(
 * 1. to make sure we contain all the floats in there
 * 2. there is no such thing as 'start' and 'end' here as the general use would be 'start' (the RTL sheet maps this class to 'float:right')
 */
.ChildrenToBeFloats {
    overflow: hidden; /* 1 */
    zoom: 1; /* 1 */
}

.ChildrenToBeFloats > * {
    float: #{$start}; /* 2 */
}


/**
 * To kill white-space between inline-blocks
 */
.ChildrenToBeInlineBlock {
    font-size: 0;
}

/**
 * 1. Reset the font-size
 */
.ChildrenToBeInlineBlock > * {
    display: inline-block;
    *display: inline;
    zoom: 1;
    font-size: $default-font-size; /* 1 */
}

/**
 * Rotation
 * to do a 90 or a 180 rotation (on an arrow or something)
 * Use .FastTrans to add a smooth transition
 * 1. prevents IE9 to see the filter declaration
 */
.Rotate-90 {
    zoom: 1;
    transform: rotate(90deg);
    *filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1); /* 1 */
}

@media \0screen {
    .Rotate-90 {
        filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1); /* 1 */
    }
}

.Rotate-180 {
    zoom: 1;
    transform: rotate(180deg);
    *filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2); /* 1 */
}

@media \0screen {
    .Rotate-180 {
        filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2); /* 1 */
    }
}

/**
 * Mouseover triggers and their nested styling
 * '.MouseOver' tags a parent, descendants get specific styles
 * Useful to style a link with an underline while hovering over its container
 */
.MouseOver-on .MouseOver-TextDecoration,
.MouseOver:hover .MouseOver-TextDecoration {
    text-decoration: underline;
}

/**
 * kinda line-clamp
 * This styling requires 2 classes (i.e. .LineClamp .LC-2)
 * the first one for generic styling (for all LineClamp values), the second one for a specific value
 */
.LineClamp {
    overflow: hidden;
    display: inline-block;
    zoom: 1;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    *display: inline;
}

/**
 * Fix WebKit bug that displays ellipsis in middle of text inside *LINKS*
 * see: https://twitter.com/thierrykoblentz/status/443899465842176000
 * 1. removes that hack out of the flow
 */
a.LineClamp:after {
   content: ".";
   font-size: 0;
   visibility: hidden;
   display: inline-block; /* 1 */
   overflow: hidden; /* 1 */
   height: 0; /* 1 */
   width: 0; /* 1 */
}
/**
 * Number of lines/font-size/line-height (the last must be unit-less)
 */
$line-clamp_values: (2, 1.2em, 1.25),(3, 1.8em, 1.5),(4, 20px, 2);
@include line-clamp($line-clamp_values);
