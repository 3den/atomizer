#!/usr/bin/env node

/*
 * Copyright (c) 2015, Yahoo Inc. All rights reserved.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

'use strict';

process.title = 'atomizer';

var path = require('path');
var fs = require('fs');
var chalk = require('chalk');
var atomizer = require('../src/atomizer');
var utils = require('../src/lib/utils');
var _ = require('lodash');
var content = '';
var config = {}; 
var parsedConfig = {};
var recursive = false;

var params = require('minimist')(process.argv.slice(2), { 
    "boolean": ['rtl', 'help', 'verbose', 'R' ] 
});

function parseFiles (files, dir) {
    var classNames = [];

    for (var i=0, iLen=files.length; i < iLen; i++) {
        classNames = _.union(classNames, parseFile(files[i], dir));
    }

    return classNames;
}

function parseFile (file, dir) {
    var classNames = [],
        fileContents,
        filepath = dir ? path.resolve(dir, file) : path.resolve(file),
        relative = path.relative(process.cwd(), filepath),
        stat = fs.statSync(filepath);

    if (stat.isFile()) {
        console.warn('Parsing file ' + chalk.cyan(relative) + ' for Atomic CSS classes');
        fileContents = fs.readFileSync(filepath, {encoding: 'utf-8'});
        classNames = atomizer.parse(fileContents);
    } else if (stat.isDirectory()) {
        if (!dir || dir && recursive) {
            console.warn('Inspecting directory ' + chalk.cyan(path.relative(process.cwd(), filepath)));
            classNames = parseFiles(fs.readdirSync(filepath), filepath);
        }
    }

    return classNames;
}

if (process.argv.slice(2).length === 0 || params.help) {
    var usage = ['usage:  ', process.title, ' [-c|--config=<file>] [-o|--outfile=<file>] [--rtl] [--help] [--verbose] [ [-R] files_to_parse ...]'].join(' ');
    console.log(usage);
    return;
}

// TODO: Populate this with params passed in on the command line
var options = {
    namespace: params.n,
    rtl: params.rtl
}; 

if (Array.isArray(options.require) && options.require.length > 0) {
    options.require = options.require.map(function (file) {
        return path.resolve(file);
    });
}

// Static config should contain the general 'config' options, along with any
// statically defined configuration. It is required.
var configFile = params.c || params.config;
if (configFile) {
    if (!fs.existsSync(configFile)) { 
        throw new Error('Configuration file ' + chalk.cyan(configFile) + ' not found.');
        return false;
    }
    config = require(path.resolve(configFile));
}

// Generate config from parsed src files
var filesToParse = params._ || [];
if (filesToParse.length) {
    // Recursive parsing?
    recursive = !!params.R;
    parsedConfig = atomizer.getConfig(parseFiles(filesToParse), config, !!params.verbose);
}

// Merge the static config with the generated config
config = _.merge(parsedConfig, config, utils.handleMergeArrays);

// Create the CSS
content = atomizer.createCSS(config, options);

// Output the CSS
var outfile = params.o || params.outfile;
if (outfile) {
    fs.mkdir(path.dirname(outfile), function (err) {
        // Fail silently
        fs.writeFile(path.resolve(outfile), content, function (err) {
            if (err) throw err;
            console.log('File ' + chalk.cyan(outfile) + ' created.');
        });
    });
} else {
    process.stdout.write("\n" + content);
}