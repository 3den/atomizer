#!/usr/bin/env node

/*
 * Copyright (c) 2015, Yahoo Inc. All rights reserved.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

'use strict';

process.title = 'atomizer';

var path = require('path');
var fs = require('fs');
var chalk = require('chalk');
var atomizer = require('../src/atomizer');
var utils = require('../src/lib/utils');
var _ = require('lodash');
var content = '';
var config; 
var parsedConfig = {};

var params = require('minimist')(process.argv.slice(2));

if (process.argv.slice(2).length === 0 || params.help) {
    var usage = ['usage:  ', process.title, ' -c|--config=<file> [-o|--outfile=<file>] [--help] [--verbose] [<files-to-parse> ...]'].join(' ');
    console.log(usage);
    return;
}

// TODO
var options = {
    require: []
}; 

if (options.require.length > 0) {
    options.require = options.require.map(function (file) {
        return path.resolve(file);
    });
}

// Static config should contain the general 'config' options, along with any
// statically defined configuration. It is required.
var configFile = params.c || params.config;
if (configFile) {
    if (!fs.existsSync(configFile)) { 
        throw new Error('Configuration file ' + chalk.cyan(configFile) + ' not found.');
        return false;
    }
    config = require(path.resolve(configFile));
} else {
    throw new Error('Configuration file not provided.');
    return false;
}

// Generate config from parsed src files
var parseFiles = params._ || [];
if (parseFiles.length) {
    var classNames = [];
    parseFiles.forEach(function (filepath) {
        console.warn('Parsing file ' + chalk.cyan(filepath) + ' for Atomic CSS classes');
        var fileContents = fs.readFileSync(path.resolve(filepath), {encoding: 'utf-8'});
        classNames = _.union(classNames, atomizer.parse(fileContents));
    });
    parsedConfig = atomizer.getConfig(classNames, config, !!params.verbose);
}

// Merge the static config with the generated config
config = _.merge(parsedConfig, config, utils.handleMergeArrays);

// Create the CSS
content = atomizer.createCSS(config, options);

// Output the CSS
var outfile = params.o || params.outfile;
if (outfile) {
    fs.mkdir(path.dirname(outfile), function (err) {
        // Fail silently
        fs.writeFile(path.resolve(outfile), content, function (err) {
            if (err) throw err;
            console.log('File ' + chalk.cyan(outfile) + ' created.');
        });
    });
} else {
    process.stdout.write("\n" + content);
}